Week6.day2:

03:00 to 03:40 -> Excel Integrations with TestCase 
03:40 to 04:10 -> Breakout(20mins) + Break(10 mins)
04:10 to 04:50 -> Cucumber Introduction (Feature file) 
04:50 to 05:15 -> Breakout 
05:15 to 05:45 -> Implemenation (Step def and Runner class)
05:45 to 06:10 -> Breakout

driver.findElement(By.id("createLeadForm_primaryPhoneNumber")).sendKeys("values to send");



Steps to do Excel Integration:
Create 2- dimensional array in the ReadEXcel Class with rowCount and columnCount
 String[][] data = new String[rowCount][columnCount];


Push=>  stringCellValue to the Array 
data[i-1][j]=stringCellValue;

Close the workbook and return the data 
wBook.close();
 return data;

Change main method to a normal static method
* public static String[][] readExcel(){ }

Inside the testcase within the sendData() call the readExcel() from ReadExcel Class and return the data * * *    @DataProvider(name="fetchData")
 public String[][] sendData() throws IOException { 
	return ReadExcel.readExcel(); 

	return ClassName.method();
	}



Common Integration:

(./data/createLead.xlsx); 
create input args inside method
public static String[][] read(String fileName){
	 (./data/"+fileName+".xlsx) 
	 }

into the BaseClass or PSM and declare a fileName globally
 * public String fileName; ------------ > Global declaration
 
 Cut and paste the DataProvider code from CreateLead Class
 * @DataProvider(name="fetchData") 
  public String[][] sendData() throws IOException { 
	return ReadExcel.readExcel(fileName); }
	
*Create setValues() inside each testcase and annotate with @BeforeTest and
 mention the filename here 
 @BeforeTest
  public void setValues() { 
	fileName="CreateLead"; 
	} 
	
* Finally , run from the xml file

BS
BT
BC
DP
BM
@T
AM
AC
AT
AS


Cucumber:

Dependencies:

<dependency>
	<groupId>io.cucumber</groupId>
	<artifactId>cucumber-java</artifactId>
	<version>7.10.0</version>
</dependency>
<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
<dependency>
	<groupId>io.cucumber</groupId>
	<artifactId>cucumber-testng</artifactId>
	<version>7.10.0</version>
</dependency>
Steps to Create the layers of Cucumber Create 3 packages under src/test/java *features *steps *runner

● Steps to Create File :- Creating features package, Mouseover on it & Right Click --> New --> Other... --> Select File under General Folder --> File Click Next ● Set File name as Login.feature & Click Finish ● U can see a new file Created under features package like slice of Cucumber IMG Then it's Fine👍🏻🙂

Gherkin keyword: Feature: Login functionality of Leaftaps Application (Describes the functionality of an appliction)

Scenario: Login with Valid credentials (Represents a testcase) Given Launch the browser -> to represent the precondition of a scenario And Load the url And Enter the username as Demosalesmanager And Enter the password as crmsfa When Click on the Login button -> to represent the test condition
Then Homepage should be displayed -> To represent the positive expected result

Scenario: Login with InValid credentials (Represents a testcase) Given Launch the browser -> to represent the precondition of a scenario And Load the url And Enter the username as Demo And Enter the password as crms When Click on the Login button -> to represent the test condition
But ErrorMessage should be displayed -> To represent the negative expected result

Create feature file inside features package

Right click on features package -> Click Other -> Double Click General -> Double click File -> Give Filename with .feature as extension -> Click Finish

Create StepDefinition class inside steps package

Inside StepDefinition create methods for each step defined in the feature file And put the real codes inside each methods To integrate StepDefinition and the feature file on the top of each method use @Given/And/When/Then("") Create CucumberRunner class inside runner package

The runner class should extend AbstractTestNGCucumberTests Add @CucumberOptions on the top of the Runner Class Within @CucumberOptions() use some of the attributes features -> to mention the path of the feature file glue -> to mention the package name of StepDefintion monochrome -> to remove the unreadable/junk characters from the console publish -> to get the cucumber report in the console @CucumberOptions(features = "src/test/java/features/Login.feature", glue = "steps" , monochrome = true, publish = true) public class CucumberRunner extends AbstractTestNGCucumberTests{ }